// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Alert {
  id        String         @id @default(cuid())
  data      Json
  context   AlertContext[]
  summary   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Release {
  id          String      @id @default(cuid())
  name        String
  org         String
  repo        String
  repoUrl     String
  tag         String
  releaseUrl  String
  diffUrl     String
  publishedAt DateTime
  authors     String[]
  summary     String
  rawRelease  RawRelease?
}

model Deployment {
  id            String   @id @default(cuid())
  org           String // Organization name
  repo          String // Repository name
  repoUrl       String // Repository URL
  environment   String // Environment (e.g., staging, production)
  sha           String // Commit SHA deployed
  deploymentUrl String // URL to the deployment details
  diffUrl       String // URL to the diff between this and the previous deployment
  createdAt     DateTime @default(now()) // Timestamp when the deployment started
  rawEvent      Json // Raw event data from the deployment provider
}

enum Source {
  custom
  checkly
  github
  knowledge
}

model AlertContext {
  id        String   @id @default(cuid())
  alertId   String
  source    Source   @default(custom)
  key       String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  alert Alert @relation(fields: [alertId], references: [id], onDelete: Cascade)
}

model RawRelease {
  id        String @id @default(cuid())
  body      Json
  releaseId String @unique

  release Release @relation(fields: [releaseId], references: [id], onDelete: Cascade)
}

model DynamicKnowledge {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
