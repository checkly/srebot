{
  "id": "3c4264bc-4355-4f7f-ba6c-5d79a647e0bc",
  "checkType": "BROWSER",
  "name": "Create Browser Check",
  "frequency": 10,
  "frequencyOffset": 1,
  "activated": true,
  "muted": false,
  "shouldFail": false,
  "locations": ["us-east-1", "eu-west-1"],
  "script": "// import { test } from '@playwright/test'\nimport { expect, test } from '../../../../../../__checks__/helpers/checklyTest'\nimport { invokeFnAndWaitForResponse } from '../../../../../../__checks__/helpers/invokeFnAndWaitForResponse'\nimport { randomString } from '../../../../../../__checks__/helpers/randomString'\nimport { CheckBuilderHeaderPom } from '../../../../../components/checks/check-builder/__checks__/CheckBuilderHeaderPom'\nimport { BrowserCheckBuilderPom } from './pom/BrowserCheckBuilderPom'\n\ntest('should create browser check', async ({ page, webapp, api }) => {\n  await webapp.login()\n\n  const browserCheckBuilder = new BrowserCheckBuilderPom({ page, webapp })\n\n  await browserCheckBuilder.navigateToUsingSidebarCreateButton()\n\n  const checkName = `Check E2E test ${randomString()}`\n\n  const checkBuilderHeaderPom = new CheckBuilderHeaderPom({ page, webapp })\n  await checkBuilderHeaderPom.nameInput.fill(checkName)\n  await checkBuilderHeaderPom.activateCheckbox.uncheck({ force: true })\n\n  const createdCheck = await invokeFnAndWaitForResponse({\n    page,\n    urlMatcher: (url: string) => url.endsWith('/checks'),\n    method: 'POST',\n    status: 200,\n    fn: () => checkBuilderHeaderPom.saveButton.click(),\n  })\n\n  /**\n   * Wait until the browser check builder has loaded the check, otherwise it might get deleted via the API\n   * before the UI has a chance to refresh the create screen into the edit screen.\n   *\n   * The assertion here is a bit arbitrary (i.e. it could be any element on the edit screen).\n   */\n  await expect(page.getByText('Export to code')).toBeVisible()\n\n  api.checks.addToCleanupQueue(createdCheck.id)\n})\n",
  "created_at": "2023-02-13T19:54:39.512Z",
  "updated_at": "2025-02-18T11:30:20.253Z",
  "environmentVariables": [],
  "doubleCheck": true,
  "tags": ["browser-check-builder", "mission-critical"],
  "sslCheckDomain": null,
  "setupSnippetId": null,
  "tearDownSnippetId": null,
  "localSetupScript": null,
  "localTearDownScript": null,
  "alertSettings": {
    "reminders": {
      "amount": 0,
      "interval": 5
    },
    "escalationType": "RUN_BASED",
    "runBasedEscalation": {
      "failedRunThreshold": 1
    },
    "parallelRunFailureThreshold": {
      "enabled": false,
      "percentage": 10
    }
  },
  "useGlobalAlertSettings": true,
  "degradedResponseTime": 10000,
  "maxResponseTime": 20000,
  "groupId": 394650,
  "groupOrder": 0,
  "runtimeId": "2024.02",
  "scriptPath": "src/pages/checks/browser/create/__checks__/create_check.spec.ts",
  "retryStrategy": {
    "type": "FIXED",
    "maxRetries": 3,
    "sameRegion": true,
    "baseBackoffSeconds": 60,
    "maxDurationSeconds": 600
  },
  "runParallel": false,
  "alertChannelSubscriptions": [
    {
      "alertChannelId": 155587,
      "activated": true
    }
  ],
  "privateLocations": []
}
